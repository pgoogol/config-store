version: '3'
services:
  zookeeper:
    container_name: zookeeper
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"
    #environment:
    #  ZOO_MY_ID: 1
    #  ZOO_PORT: 2181
    #  ZOO_SERVERS: server.1=zookeeper:2888:3888
    #volumes:
    #  - ./data/zookeeper/data:/data
    #  - ./data/zookeeper/datalog:/datalog
    networks:
      - kafka-net
  kafka:
    container_name: kafka
    image: wurstmeister/kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: 192.168.99.104
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_VERSION: "2.12-2.4.0"
      HOSTNAME_COMMAND: "route -n | awk '/UG[ \t]/{print $$2}'"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
      KAFKA_CREATE_TOPICS: >
        policy-activate-events:2:1,policy-create-payment-event:2:1,dead_letter_queue:2:1
      KAFKA_OPTS: -Djavax.net.debug=handshake
      #KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://192.168.99.104:19091,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9091
      #KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      #KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      #KAFKA_BROKER_ID: 1
      #KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      #- ./data/kafka1/data:/var/lib/kafka/data
    depends_on:
      - zookeeper
    networks:
      - kafka-net
  kafdrop:
    image: obsidiandynamics/kafdrop
    restart: "no"
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "192.168.99.104:9092"
    depends_on:
      - kafka
    networks:
      - kafka-net

networks:
  kafka-net:
    external: true
